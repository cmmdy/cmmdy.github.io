<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安卓本地&amp;云端组件化架构</title>
      <link href="/2021/11/16/%E5%AE%89%E5%8D%93%E6%9C%AC%E5%9C%B0&amp;%E4%BA%91%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%8C%96%E6%9E%B6%E6%9E%84/"/>
      <url>/2021/11/16/%E5%AE%89%E5%8D%93%E6%9C%AC%E5%9C%B0&amp;%E4%BA%91%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%8C%96%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司项目目前安卓原生端有三个项目，分别是APP、智能电视看板、智能手表终端</p><p>三个应用在业务端有不同的表现，但在底层架构(基础组件)上应用一套逻辑</p><p>所以目前的架构需求是：</p><ol><li><p>抽离基础组件上传到maven，以依赖的方式集成到各个项目</p></li><li><p>在APP中按<strong>具体业务模块</strong>拆分业务组件，</p><p>做到各个模块的完全独立（互不依赖），且各个模块可以单独运行，也可组合运行（可插拔）</p></li></ol><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>以 APP为例，</p><p>将上面的两个大需求<strong>拆分后的组件架构</strong>： </p><p><img src="/2021/11/16/%E5%AE%89%E5%8D%93%E6%9C%AC%E5%9C%B0&%E4%BA%91%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%8C%96%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%84.png" alt="架构"></p><p><strong>其中本地模块为业务模块，互相独立，可作为模块被APP壳子所依赖，也可作为单独APP运行</strong></p><p><strong>云端模块为基础组件，不用作为APP单独运行且不关心业务，可在所有项目中被依赖作为基础组件</strong></p><h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><table><thead><tr><th align="left">技术栈</th><th align="left">实现</th></tr></thead><tbody><tr><td align="left">语言</td><td align="left">Kotlin</td></tr><tr><td align="left">设计模式</td><td align="left">MVVM</td></tr><tr><td align="left">依赖注入</td><td align="left">Koin</td></tr><tr><td align="left">模块初始化</td><td align="left">AndroidStartUp</td></tr><tr><td align="left">网络请求</td><td align="left">Retrofit+RetrofitUrlManager+Okhttp</td></tr><tr><td align="left">异步</td><td align="left">协程</td></tr><tr><td align="left">UI</td><td align="left">databinding &amp; viewbinding</td></tr><tr><td align="left">事件总线</td><td align="left">LiveEventBus</td></tr><tr><td align="left">路由</td><td align="left">DRouter</td></tr><tr><td align="left">存储</td><td align="left">MMKV &amp; Room</td></tr><tr><td align="left">长链接</td><td align="left">WebSocket &amp; RabbitMQ</td></tr><tr><td align="left">IPC</td><td align="left">AIDL</td></tr></tbody></table><h1 id="业务组件"><a href="#业务组件" class="headerlink" title="业务组件"></a>业务组件</h1><p><strong>业务组件需要能单独调试，也能集成打包，且这个过程中不能修改Kotlin代码</strong></p><p>定义一个组件，需要</p><ul><li>build.gradle</li><li>AndroidManifest.xml</li><li>Application</li><li>Activity</li></ul><h2 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><code>project.plugins.apply(&#39;com.android.application&#39;)</code><strong>可定义一个可运行的应用</strong></p><p><code>project.plugins.apply(&#39;com.android.library&#39;)</code><strong>可定义一个组件</strong></p><p>当业务组件想单独作为一个应用运行时，需要动态将build文件修改</p><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><p><strong>gradle.properties</strong>是Gradle的静态配置文件，可在Sync Project时提供配置</p><p>在此文件中定义<strong>SYLINK_IS_BUILD_MODULE</strong>参数，</p><p>当参数为true时，代表单独调试业务组件，为false时，代表业务组件依赖于壳APP，集成调试</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>在业务组件的build.gradle文件中，动态判断，实现根据<strong>SYLINK_IS_BUILD_MODULE</strong>动态切换apply插件和设置包名</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (project.name == <span class="string">&#x27;app&#x27;</span></span><br><span class="line">        || (!sylinkProperties.getSYLINK_IS_JENKINS()</span><br><span class="line">        &amp;&amp; sylinkProperties.getSYLINK_IS_BUILD_MODULE()</span><br><span class="line">        &amp;&amp; project.name.contains(<span class="string">&#x27;app&#x27;</span>))</span><br><span class="line">) &#123;</span><br><span class="line">    project.plugins.apply(<span class="string">&#x27;com.android.application&#x27;</span>)</span><br><span class="line">    project.plugins.apply(<span class="string">&#x27;com.didi.drouter&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    project.plugins.apply(<span class="string">&#x27;com.android.library&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        <span class="keyword">if</span> (SYLINK_IS_BUILD_MODULE.toBoolean() &amp;&amp; !SYLINK_IS_JENKINS.toBoolean()) &#123;</span><br><span class="line">            applicationId <span class="string">&quot;com.sylink.app.dfs.xxx&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>当作为应用运行时，<strong>需要指定Application和启动的Activity，并注册组件内Activity</strong></p><p>当作为组件被依赖时，<strong>仅需要注册组件内Activity</strong></p><h3 id="核心-1"><a href="#核心-1" class="headerlink" title="核心"></a>核心</h3><p>组件内有MainActivity作为启动的Activity，</p><p>宿主APP有LoginActivity作为启动的Activity，</p><p>由于定义了多个启动Activity，</p><p>当组件被依赖运行时，会出现AndroidManifest冲突</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>使用xml的tools:node方法</p><p>在宿主APP的AndroidManifest中加入组件的启动Activity，并加上<code>tools:node=&quot;remove&quot;</code> 属性，</p><p>这样当组件被依赖运行时，AndroidManifest合并时会剔除掉组件Activity的定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;com.sylink.app.dfs.fixture.FixtureMainActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:node</span>=<span class="string">&quot;remove&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>每个应用都要有一个Application，可在其内写一些SDK的初始化方法</p><p>各个组件如何初始化决定了组件化是否可插拔</p><p>有些架构定义了一个Application在宿主app中，让宿主app依赖所有子模块，来实现子模块的初始化方法</p><p>这样就会导致子模块无法实现可插拔，即宿主app必须依赖所有子模块才能正常运行，这明显不满足组件化的思想</p><h3 id="核心-2"><a href="#核心-2" class="headerlink" title="核心"></a>核心</h3><p>在frame组件中定义SylinkBaseApp，在业务组件的AndroidManifest中都使用SylinkBaseApp</p><p>使用App Startup或代理SylinkBaseApp生命周期的方法实现组件内的初始化方法</p><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>方案有两种，一种可以在frame中定义BaseApplication，并定义Application生命周期的回调接口，各个模块实现接口并注册到BaseApplication中，</p><p>通过接口来代理Application生命周期实现模块初始化。</p><p>这边使用第二种方法，即使用<a href="https://developer.android.com/reference/androidx/startup/package-summary">App Startup</a> <strong>可在应用启动时简单、高效地初始化组件</strong></p><p>这个组件的原理是使用ContentProvider来实现初始化，ContentProvider作为Android的四大组件之一一直很鲜为人知，平时用到的也不多，</p><p>但ContentProvider可以用来做初始化工作，他的生命周期在Application的attachBaseContext后，onCreate之前。</p><p>App Startup创建了一个ContentProvider，并提供了初始化接口create，我们只需要实现这个接口并写上组件的初始化方法，就可实现组件在应用</p><p>启动时调用这些初始化方法，从而达到代码隔离的目标。</p><p>而<a href="https://github.com/idisfkj/android-startup">android-startup</a> <strong>是提供一种在应用启动时能够更加简单、高效的方式来初始化组件</strong>，这个库是对App Startup的优化实现，支持了线程控制和多进程调用</p><p>如下是定义在event包内的<strong>android-startup</strong>的基类</p><p><img src="/2021/11/16/%E5%AE%89%E5%8D%93%E6%9C%AC%E5%9C%B0&%E4%BA%91%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%8C%96%E6%9E%B6%E6%9E%84/image-20211028173156669.png" alt="image-20211028173156669"></p><p>由于主进程已经有默认定义的ContentProvider，但子进程没有，所以需要自定义一个MultipleProcessStartupProvider作为子进程的ContentProvider</p><p>由于组件之间有初始化顺序要求，所以定义一个BaseInit，后续其他模块的Init类必须在这个类初始化完之后进行，FrameInitDelegate为基础初始化代理类，</p><p>初始化一些所有组件都需要使用的工具类，如MMKV，Timber等</p><p>BaseInit如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseInit</span> : <span class="type">AndroidStartup</span>&lt;<span class="type">Unit</span>&gt;</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否在主线程调用</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">callCreateOnMainThread</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">(context: <span class="type">Context</span>)</span></span> &#123;</span><br><span class="line">        FrameInitDelegate(context <span class="keyword">as</span> Application)</span><br><span class="line">        startKoin &#123;</span><br><span class="line">            logger(KoinLogger())</span><br><span class="line">            androidContext(context)</span><br><span class="line">            fragmentFactory()</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        Timber.d(<span class="string">&quot;Base模块初始化,注入KoinApplication&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否阻塞主线程</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">waitOnMainThread</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BaseRemoteInit如下：</p><p>由于是在子进程运行，我们需要加入<code>@MultipleProcess(&quot;:remote&quot;)</code>注解来定义开启进程</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MultipleProcess(<span class="meta-string">&quot;:remote&quot;</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseRemoteInit</span> : <span class="type">AndroidStartup</span>&lt;<span class="type">Unit</span>&gt;</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">callCreateOnMainThread</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">(context: <span class="type">Context</span>)</span></span> &#123;</span><br><span class="line">        RemoteInitDelegate(context <span class="keyword">as</span> Application)</span><br><span class="line">        startKoin &#123;</span><br><span class="line">            logger(KoinLogger())</span><br><span class="line">            androidContext(context)</span><br><span class="line">        &#125;</span><br><span class="line">        Timber.d(<span class="string">&quot;BaseRemote模块初始化,注入KoinApplication&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">waitOnMainThread</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后不要忘了在xml中定义配置类和子进程的ContentProvider</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;com.rousetime.android_startup.provider.StartupProvider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:authorities</span>=<span class="string">&quot;$&#123;SYLINK_APPLICATION_ID&#125;.android_startup&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.sylink.dfs.app.event.init.main.BaseInit&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:value</span>=<span class="string">&quot;android.startup&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.sylink.dfs.app.event.init.main.provider.StartupConfigProvider&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:value</span>=<span class="string">&quot;android.startup.provider.config&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;com.sylink.dfs.app.event.init.remote.provider.MultipleProcessStartupProvider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:authorities</span>=<span class="string">&quot;$&#123;SYLINK_APPLICATION_ID&#125;.android_startup.remote&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:process</span>=<span class="string">&quot;:remote&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.sylink.dfs.app.event.init.remote.BaseRemoteInit&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:value</span>=<span class="string">&quot;android.startup&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.sylink.dfs.app.event.init.remote.provider.RemoteStartupConfigProvider&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:value</span>=<span class="string">&quot;android.startup.provider.config&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在其他模块中使用时，必须实现<code>dependencies</code>接口，定义NetworkInit的onCreate方法在BaseInit初始化完成后进行</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkInit</span> : <span class="type">AndroidStartup</span>&lt;<span class="type">Unit</span>&gt;</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">callCreateOnMainThread</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">(context: <span class="type">Context</span>)</span></span> &#123;</span><br><span class="line">        loadKoinModules(listOf(networkAppModule))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">waitOnMainThread</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">dependencies</span><span class="params">()</span></span>: List&lt;Class&lt;<span class="keyword">out</span> Startup&lt;*&gt;&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> listOf(BaseInit::<span class="keyword">class</span>.java)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<strong>android-startup</strong>我们就实现了组件间的初始化代码隔离，真正的做到了可插拔组件</p><h2 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p>页面跳转不能使用原始的Intent形式，因为Intent形式会显示声明Activity::class.java</p><h3 id="核心-3"><a href="#核心-3" class="headerlink" title="核心"></a>核心</h3><p>使用路由的方式进行页面的跳转</p><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><p>使用了<a href="https://github.com/didi/DRouter">DRouter</a> 来实现页面间的路由跳转</p><p>在项目的build.gradle中加入</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;        </span><br><span class="line">     classpath <span class="string">&quot;io.github.didi:drouter-plugin-proxy:1.0.1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件的build.gradle中加入</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api <span class="string">&quot;io.github.didi:drouter-api:2.1.3&quot;</span></span><br></pre></td></tr></table></figure><p>在Activity上加入路由</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Router(path = HomeRoutePath.home_activity_path)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeActivity</span> : <span class="type">BaseActivity</span></span>() &#123;</span><br></pre></td></tr></table></figure><p>跳转方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DRouter.build(HomeRoutePath.home_activity_path).start()</span><br></pre></td></tr></table></figure><h2 id="Koin"><a href="#Koin" class="headerlink" title="Koin"></a>Koin</h2><h3 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h3><p>在组件化过程中，依赖注入一直是个难点，传统的Dagger2，AndroidDagger对组件化都不是很友好（需要改源码），亲测Hilt后发现实现起来也不方便。</p><p><strong>最后使用了Koin，发现Koin作为依赖注入框架配置简单，又有Kotlin的原生支持，还针对Android有具体的API，非常友好</strong></p><h3 id="核心-4"><a href="#核心-4" class="headerlink" title="核心"></a>核心</h3><p>每个依赖注入框架的概念都大同小异，有一个注入的入口，有一个仓库用来定义需要被注入的类，以及最后的注入方法</p><p>如果熟悉Dagger的同学，那么上述在Dagger中分别代表Component，Module，inject方法。</p><p>在Koin中，这分别代表startKoin，loadKoinModule 和 by inject()</p><p>其中startKoin属于整个Koin的初始化方法，会注入application，所以只能调用一次</p><p>loadKoinModule属于动态注入Module仓库的方法，可多次调用</p><p>注入方法由于DSL的存在和Koin对Android的支持优化，最后的注入方法已经被Koin封装了，所以我们直接使用by inject()注入使用即可</p><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><p>依赖注入需要跟着项目/组件一起初始化，所以我们选择在android-startup中初始化Koin</p><ol><li><p>在<code>BaseInit</code>中调用startKoin方法，KoinLogger是实现的Koin日志打印自定义类，androidContext是给Koin注入上下文，fragmentFactory是谷歌新推出的fragment有参构造方法的Fragment生产工厂，如果有使用到可具体<a href="https://juejin.cn/post/6844904167685750798">了解</a>，这边不再赘述。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">startKoin &#123;</span><br><span class="line">    logger(KoinLogger())</span><br><span class="line">    androidContext(context)</span><br><span class="line">    fragmentFactory()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在各个模块中定义di包，其中放module类，新建xxxModule类存放普通的实例（如各个模块的ApiService），</p><p>新建xxxViewModelModule.kt类，存放viewModel类，</p><p>get&lt;&gt;()方法能从其他已经被注入的Module中获取实例，</p><p>用single定义的实例为单例</p><p>用viewModel定义的类可在后面注入时自动绑定activity / fragment的生命周期</p><p>用factory定义的类每次注入时都会创建一个新的单例</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> storageModule = module &#123;</span><br><span class="line"></span><br><span class="line">    single&lt;StorageApiService&gt; &#123;</span><br><span class="line">        <span class="keyword">get</span>&lt;Retrofit&gt;().create(StorageApiService::<span class="keyword">class</span>.java)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的viewModel中的一个构造参数是StorageApiService，就可以通过get()方法获得上面定义的单例实例</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> storageViewModelModule = module &#123;</span><br><span class="line">    viewModel &#123;</span><br><span class="line">        StorageOutInViewModel(<span class="keyword">get</span>(),<span class="keyword">get</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    viewModel &#123;</span><br><span class="line">        StoragePickViewModel(<span class="keyword">get</span>(),<span class="keyword">get</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在各个模块的Init类的onCreate方法中，调用loadKoinModules方法，参数为本模块的module数组</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StorageInit</span> : <span class="type">BaseAndroidStartup</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">(context: <span class="type">Context</span>)</span></span> &#123;</span><br><span class="line">        loadKoinModules(listOf(storageViewModelModule, storageFragmentModule, storageModule))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在activity中注入viewModel，by viewModel()是Koin定义的DSL，这样注入后viewModel即可自动绑定Activity生命周期</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> viewModel: MaterialInventoryViewModel <span class="keyword">by</span> viewModel()</span><br></pre></td></tr></table></figure></li></ol><p><strong>这只是Koin最基础的用法，更多的可查看<a href="https://insert-koin.io/docs/quickstart/android">官网</a>，相比起Dagger甚至是Hilt，Koin可以说是最简单，对组件化支持最友好的依赖注入框架了</strong></p><h1 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h1><p>基础组件脱离业务，在公司所有项目中都适用，且需要上传到maven，以云端依赖的方式集成到项目中</p><p>只需要集成即可，<strong>不需要关心实现和初始化问题，符合迪米特原则（最少知道）</strong></p><p>初始化的方法同业务组件，使用android-startup</p><h2 id="上传至MAVEN"><a href="#上传至MAVEN" class="headerlink" title="上传至MAVEN"></a>上传至MAVEN</h2><p><strong>Gradle7.0之后，上传maven插件也进行了更新，maven plugin，uploadArchives已无法使用</strong></p><p>使用maven-publish plugin插件进行上传</p><ol><li><p>新建一个push.gradle，应用maven-publish插件进行上传，并定义组件库versionName</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//支持将项目发布到maven仓库的插件</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;maven-publish&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//def versionName = &quot;1.0.0&quot;</span></span><br><span class="line"><span class="keyword">def</span> versionName = <span class="string">&quot;1.0.0-SNAPSHOT&quot;</span> <span class="comment">//快照版本</span></span><br></pre></td></tr></table></figure></li><li><p>定义maven库的快照和release的URL</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> RELEASE_REPOSITORY_URL = <span class="string">&quot;http://xxx.xxx.xxx.xxx:xxxx/repository/maven-releases/&quot;</span></span><br><span class="line"><span class="keyword">def</span> SNAPSHOT_REPOSITORY_URL = <span class="string">&quot;http://xxx.xxx.xxx.xxx:xxxx/repository/maven-snapshots/&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>编写上传方法，afterEvaluate为当构建后的操作</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">afterEvaluate &#123;</span><br><span class="line">      publishing &#123;</span><br><span class="line">          publications &#123;</span><br><span class="line">              Production(MavenPublication) &#123;</span><br><span class="line">                  from components.release</span><br><span class="line">                  groupId = <span class="string">&quot;com.shuyilink&quot;</span></span><br><span class="line">                  artifactId = <span class="string">&quot;dfs-app-frame&quot;</span></span><br><span class="line">                  version = versionName</span><br><span class="line">                  <span class="comment">// 上传source，这样使用放可以看到方法注释</span></span><br><span class="line">                  artifact(sourcesJar)</span><br><span class="line">                  artifact(assetsJar)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          repositories &#123;</span><br><span class="line">              <span class="comment">// 定义一个 maven 仓库</span></span><br><span class="line">              maven &#123;</span><br><span class="line">                  <span class="comment">// 可以有且仅有一个仓库不指定 name 属性，会隐式设置为 maven</span></span><br><span class="line">                  <span class="comment">// 根据 versionName 来判断仓库地址</span></span><br><span class="line">                  url = versionName.endsWith(<span class="string">&#x27;SNAPSHOT&#x27;</span>) ? SNAPSHOT_REPOSITORY_URL : RELEASE_REPOSITORY_URL</span><br><span class="line">                  <span class="comment">// 仓库用户名密码</span></span><br><span class="line">                  credentials &#123;</span><br><span class="line">                      username = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">                      password = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">                  &#125;</span><br><span class="line">                  allowInsecureProtocol <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写上传源码的方法，<strong>这样在业务组件中可以点击查看基础组件的源码，而不是编译后的.class文件，方便调试</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">task sourcesJar(<span class="attr">type:</span> Jar) &#123;</span><br><span class="line">    <span class="keyword">if</span> (project.hasProperty(<span class="string">&quot;kotlin&quot;</span>)) &#123;</span><br><span class="line">        from android.sourceSets.main.java.getSrcDirs()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (project.hasProperty(<span class="string">&quot;android&quot;</span>)) &#123;</span><br><span class="line">        from android.sourceSets.main.java.sourceFiles</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        println project</span><br><span class="line">        from sourceSets.main.allSource</span><br><span class="line">    &#125;</span><br><span class="line">    classifier = <span class="string">&#x27;sources&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当assets中有资源时，需编写上传assets的方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">task assetsJar(<span class="attr">type:</span>Jar) &#123;</span><br><span class="line">    classifier = <span class="string">&quot;assets&quot;</span></span><br><span class="line">    android.sourceSets.all &#123; sourceSet -&gt;</span><br><span class="line">        from sourceSet.assets.srcDirs</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当包中有aar或jar包依赖时，我们需要把这两个本地包一起打包，这边使用<a href="https://github.com/kezong/fat-aar-android"> fat-aar-android</a>这个gradle插件可帮我们将aar和jar包打包进自己的aar包中</p><p>在项目的build.gradle中依赖fat-aar插件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"> classpath <span class="string">&#x27;com.github.kezong:fat-aar:1.3.6&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件的build.gradle中应用插件，并将需要打包的aar或jar包使用embed替代implementation</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.kezong.fat-aar&#x27;</span></span><br><span class="line"> </span><br><span class="line">dependencies &#123;</span><br><span class="line">   implementation fileTree(<span class="attr">dir:</span> <span class="string">&#x27;libs&#x27;</span>, <span class="attr">include:</span> [<span class="string">&#x27;*.jar&#x27;</span>])</span><br><span class="line"></span><br><span class="line">   embed(<span class="attr">name:</span> <span class="string">&#x27;DataCollection&#x27;</span>, <span class="attr">ext:</span> <span class="string">&#x27;aar&#x27;</span>)</span><br><span class="line">   embed(<span class="attr">name:</span> <span class="string">&#x27;printer_release_v1.0_3&#x27;</span>, <span class="attr">ext:</span> <span class="string">&#x27;aar&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>经过上述的配置后，在AndroidStudio右侧的Gradle配置中会有一个publishing的任务组，点击publish即可上传至maven，点击publishToMavenLocal即可上传到本地maven仓库</p><p><img src="/2021/11/16/%E5%AE%89%E5%8D%93%E6%9C%AC%E5%9C%B0&%E4%BA%91%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%8C%96%E6%9E%B6%E6%9E%84/image-20211029173520891.png" alt="image-20211029173520891"></p></li><li><p>每个项目都有依赖仓库，App使用公司的maven仓库，所以需要在Repositories中加入公司maven仓库的地址</p></li><li><p>由于使用的是快照版本，gradle对SNAPSHOT版本存在缓存，会导致拉取快照依赖的时候并不是maven上最新的版本，</p><p> 需要在每个业务模块的build.gradle中加入配置：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快照版本永远检查最新</span></span><br><span class="line">project.configurations.all &#123;</span><br><span class="line">    resolutionStrategy.cacheChangingModulesFor <span class="number">0</span>, <span class="string">&#x27;seconds&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>经过上述操作后，最终我们依赖如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation com.<span class="attr">shuyilink:</span>dfs-app-<span class="attr">frame:</span><span class="number">1.0</span><span class="number">.0</span>-SNAPSHOT</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>如此配置后，更改了基础组件只需要点击publish上传到maven，然后在业务组件中sync project拉取快照版本即可，无需关心快照的具体版本</strong></p><h2 id="build-gradle管理插件"><a href="#build-gradle管理插件" class="headerlink" title="build.gradle管理插件"></a>build.gradle管理插件</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><strong>当模块增多时，每个模块都有一个单独的build.config配置，难以管理</strong>。</p><p>本地模块可在项目中编写一个version.gradle来统一管理依赖等信息，并在模块的build.gradle中</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">from:</span> <span class="string">&#x27;../version.gradle&#x27;</span></span><br></pre></td></tr></table></figure><p>这样每个本地模块都能共用version.gradle中的配置。</p><p><strong>但上述方案只适用于本地模块，由于云端模块各自都有一个单独的项目，所以本地的version.gradle对云端模块就不适用了</strong></p><p>所以编写了一个管理build的gradle插件并上传到maven仓库，使得所有模块可使用</p><h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h3><h4 id="新建插件"><a href="#新建插件" class="headerlink" title="新建插件"></a>新建插件</h4><ol><li><p>在Android Studio中创建一个项目，并新建一个module，module类型选择 Java or Kotlin Library，并填写相关信息</p><p><img src="/2021/11/16/%E5%AE%89%E5%8D%93%E6%9C%AC%E5%9C%B0&%E4%BA%91%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%8C%96%E6%9E%B6%E6%9E%84/image-20211103162740664.png" alt="image-20211103162740664"></p></li><li><p>新建完module后，在src/main下新建groovy文件夹，在groovy文件夹下新建包名文件夹，在src/main下新建resources文件夹，并在其下新建META-INF文件夹，再新建gradle-plugins文件夹，最终创建文件，包名.properties，包名必须与上面的groovy文件夹下的包名一致，如图：</p><p><img src="/2021/11/16/%E5%AE%89%E5%8D%93%E6%9C%AC%E5%9C%B0&%E4%BA%91%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%8C%96%E6%9E%B6%E6%9E%84/image-20211103163117596.png" alt="image-20211103163117596"></p></li><li><p>在module的build.gradle文件中apply  groovy插件和我们自己编写的上传至maven的push.gradle插件，并依赖gradleApi()和localGroovy()</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;groovy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="attr">from:</span> <span class="string">&#x27;../push.gradle&#x27;</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation gradleApi()</span><br><span class="line">    implementation localGroovy()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在包名文件夹下新建XXXConrtoller.groovy文件，并实现<code>Plugin&lt;Project&gt;</code>，当项目apply了本插件并执行sync project时，就会自动执行apply中的逻辑</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DependenciesVersionController</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line"><span class="comment">//TODO </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在包名.properties文件中，申明插件的Controller</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">implementation-class</span>=<span class="string">com.sylink.dfs.app.version.plugin.DependenciesVersionController</span></span><br></pre></td></tr></table></figure></li><li><p>至此前期准备工作全部结束，接下来就是插件逻辑的编写</p></li></ol><h4 id="plugin统一定义"><a href="#plugin统一定义" class="headerlink" title="plugin统一定义"></a>plugin统一定义</h4><ol><li><p>使用java和groovy编写gradle插件。例如在<strong>业务组件的build.gradle篇中</strong>所写到的动态切换 application 和 libray 在插件中实现时，新建AppPlugins.groovy文件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppPlugins</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">def</span> addPlugins(Project project, SylinkProperties sylinkProperties) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (project.name == <span class="string">&#x27;app&#x27;</span></span><br><span class="line">                || (!sylinkProperties.getSYLINK_IS_JENKINS()</span><br><span class="line">                &amp;&amp; sylinkProperties.getSYLINK_IS_BUILD_MODULE()</span><br><span class="line">                &amp;&amp; project.name.contains(<span class="string">&#x27;app&#x27;</span>))</span><br><span class="line">        ) &#123;</span><br><span class="line">            project.plugins.apply(<span class="string">&#x27;com.android.application&#x27;</span>)</span><br><span class="line">            project.plugins.apply(<span class="string">&#x27;com.didi.drouter&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            project.plugins.apply(<span class="string">&#x27;com.android.library&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        project.plugins.apply(<span class="string">&#x27;kotlin-android&#x27;</span>)</span><br><span class="line">        project.plugins.apply(<span class="string">&#x27;kotlin-kapt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在XXXController的apply方法中调用addPlugins方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DependenciesVersionController</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line">        SylinkProperties properties = PropertiesUtils.readProperties(project)</span><br><span class="line">       </span><br><span class="line">        AppPlugins.addPlugins(project, properties)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="build配置统一管理"><a href="#build配置统一管理" class="headerlink" title="build配置统一管理"></a>build配置统一管理</h4><ol><li><p>定义AppInfoExt.java，写入android版本常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppInfoExt</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> min_sdk = <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> target_sdk = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> compile_sdk = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String build_tools = <span class="string">&quot;30.0.2&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建AppConfig.groovy，并定义addConfig方法，在addConfig方法中加入通用配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">def</span> addConfig(Project project, SylinkProperties sylinkProperties) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> abiFiltersX86 = sylinkProperties.SYLINK_IS_DEBUG ? <span class="string">&quot;x86&quot;</span> : <span class="string">&quot;&quot;</span></span><br><span class="line">        project.kapt &#123;</span><br><span class="line">            useBuildCache = <span class="literal">true</span></span><br><span class="line">            javacOptions &#123;</span><br><span class="line">                option(<span class="string">&quot;-Xmaxerrs&quot;</span>, <span class="number">500</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//所有模块通用部分</span></span><br><span class="line">        project.android &#123;</span><br><span class="line"></span><br><span class="line">            compileSdkVersion AppInfoExt.compile_sdk</span><br><span class="line">            buildToolsVersion AppInfoExt.build_tools</span><br><span class="line"></span><br><span class="line">            defaultConfig &#123;</span><br><span class="line">                minSdkVersion AppInfoExt.min_sdk</span><br><span class="line">                targetSdkVersion AppInfoExt.target_sdk</span><br><span class="line">                versionCode sylinkProperties.SYLINK_VERSION_CODE</span><br><span class="line">                versionName sylinkProperties.SYLINK_VERSION_NAME</span><br><span class="line">                multiDexEnabled <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">                ndk &#123;</span><br><span class="line">                    <span class="comment">//指定需要的os平台</span></span><br><span class="line">                    abiFilters <span class="string">&#x27;armeabi-v7a&#x27;</span>, abiFiltersX86</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sourceSets &#123;</span><br><span class="line">                main &#123; jniLibs.srcDirs = [<span class="string">&#x27;libs&#x27;</span>] &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            lintOptions &#123;</span><br><span class="line">                lintConfig project.file(<span class="string">&#x27;lint.xml&#x27;</span>) <span class="comment">//忽略检查</span></span><br><span class="line">                abortOnError <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            compileOptions &#123;</span><br><span class="line">                sourceCompatibility JavaVersion.VERSION_11</span><br><span class="line">                targetCompatibility JavaVersion.VERSION_11</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            kotlinOptions &#123;</span><br><span class="line">                jvmTarget = JavaVersion.VERSION_11.toString()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在addConfig中加入application模块的配置，<strong>在这个方法中可随意加入/拼接所需的配置，包括各种渠道配置，方便统一管理</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果是application模块</span></span><br><span class="line"><span class="keyword">if</span> (project.plugins.hasPlugin(<span class="string">&#x27;com.android.application&#x27;</span>)) &#123;</span><br><span class="line">    project.android &#123;</span><br><span class="line">      </span><br><span class="line">        signingConfigs &#123;</span><br><span class="line">            release &#123;</span><br><span class="line">                storeFile project.file(sylinkProperties.SYLINK_KEY_STORE)</span><br><span class="line">                storePassword sylinkProperties.SYLINK_KEY_STORE_PWD</span><br><span class="line">                keyAlias sylinkProperties.SYLINK_KEY_ALIAS</span><br><span class="line">                keyPassword sylinkProperties.SYLINK_KEY_ALIAS_PWD</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buildTypes &#123;</span><br><span class="line">            debug &#123;</span><br><span class="line">                matchingFallbacks = [<span class="string">&#x27;release&#x27;</span>, <span class="string">&#x27;debug&#x27;</span>]</span><br><span class="line">                proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">                signingConfig signingConfigs.release</span><br><span class="line">                minifyEnabled <span class="literal">false</span></span><br><span class="line">                ext.enableCrashlytics = <span class="literal">false</span></span><br><span class="line">                ext.alwaysUpdateBuildId = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            release &#123;</span><br><span class="line">                matchingFallbacks = [<span class="string">&#x27;release&#x27;</span>, <span class="string">&#x27;debug&#x27;</span>]</span><br><span class="line">                minifyEnabled <span class="literal">true</span></span><br><span class="line">                shrinkResources <span class="literal">true</span></span><br><span class="line">                proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">                signingConfig signingConfigs.release</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开发用 MMdd  打包提测 MMddHH 因为精确到小时 跨小时就不能自动安装apk</span></span><br><span class="line">        <span class="keyword">def</span> timeForDebugFileFormater = <span class="string">&quot;MMdd&quot;</span></span><br><span class="line">        <span class="keyword">def</span> timeForReleaseFileFormater = <span class="string">&quot;MMddHH&quot;</span></span><br><span class="line"></span><br><span class="line">        flavorDimensions <span class="string">&#x27;app&#x27;</span></span><br><span class="line"></span><br><span class="line">        applicationVariants.all &#123; variant -&gt;</span><br><span class="line">            variant.outputs.all &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">def</span> buildTypeName = variant.buildType.name</span><br><span class="line"></span><br><span class="line">                <span class="keyword">def</span> timeFormater</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;debug&quot;</span>.equalsIgnoreCase(buildTypeName)) &#123;</span><br><span class="line">                    timeFormater = timeForDebugFileFormater</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    timeFormater = timeForReleaseFileFormater</span><br><span class="line">                &#125;</span><br><span class="line">                outputFileName = <span class="string">&quot;$&#123;AppInfoUtils.getApkName(sylinkProperties)&#125;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;_$&#123;sylinkProperties.SYLINK_SERVER&#125;_$&#123;buildTypeName&#125;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;_V$&#123;sylinkProperties.SYLINK_VERSION_NAME&#125;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;_$&#123;AppInfoUtils.releaseTime(timeFormater)&#125;.apk&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是业务的模块(有ApplicationID)</span></span><br><span class="line"><span class="keyword">if</span> (!sylinkProperties.SYLINK_APPLICATION_ID.isEmpty()</span><br><span class="line">        || project.name == <span class="string">&quot;lib.frame&quot;</span>) &#123;</span><br><span class="line">    project.android &#123;</span><br><span class="line">        viewBinding &#123;</span><br><span class="line">            enabled = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dataBinding &#123;</span><br><span class="line">            enabled = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后在XXXController的apply方法中调用addConfig方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DependenciesVersionController</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line"></span><br><span class="line">        SylinkProperties properties = PropertiesUtils.readProperties(project)</span><br><span class="line">        println properties</span><br><span class="line"></span><br><span class="line">        AppPlugins.addPlugins(project, properties)</span><br><span class="line">        AppConfig.addConfig(project, properties)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="IS-DEBUG"><a href="#IS-DEBUG" class="headerlink" title="IS_DEBUG"></a>IS_DEBUG</h4><p>可以通过gradle的task任务来判断当前运行的是debug还是release模式</p>  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span> isReleaseBuildType(Gradle gradle) &#123;</span><br><span class="line">    <span class="keyword">for</span> (String <span class="attr">s :</span> gradle.getStartParameter().getTaskNames()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.toLowerCase().contains(<span class="string">&quot;release&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="maven仓库统一配置"><a href="#maven仓库统一配置" class="headerlink" title="maven仓库统一配置"></a>maven仓库统一配置</h4><p>maven的配置也可在插件中统一设置</p><ol><li><p>新建Repos.groovy，定义addRepos方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Repos</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">def</span> addRepos(Project project, SylinkProperties sylinkProperties) &#123;</span><br><span class="line">        Boolean USE_LOCAL_MAVEN = sylinkProperties.getSYLINK_USE_LOCAL_MAVEN()</span><br><span class="line"></span><br><span class="line">        Boolean isRelease = !sylinkProperties.getSYLINK_IS_DEBUG()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> handler = project.getRepositories()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果配置使用本地Maven资源且不是打Release包</span></span><br><span class="line">        <span class="keyword">if</span> (USE_LOCAL_MAVEN != <span class="literal">null</span></span><br><span class="line">                &amp;&amp; USE_LOCAL_MAVEN</span><br><span class="line">                &amp;&amp; !isRelease) &#123;</span><br><span class="line">            println <span class="string">&quot;使用本地Maven&quot;</span></span><br><span class="line">            handler.mavenLocal()</span><br><span class="line">        &#125;</span><br><span class="line">        handler.google()</span><br><span class="line">        handler.mavenCentral()</span><br><span class="line">        handler.maven &#123; url <span class="string">&#x27;https://jitpack.io&#x27;</span> &#125;</span><br><span class="line">        handler.maven &#123;</span><br><span class="line">            url <span class="string">&#x27;http://193.169.200.250:8081/repository/maven-public/&#x27;</span></span><br><span class="line">            allowInsecureProtocol = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        handler.maven &#123; url <span class="string">&#x27;https://oss.sonatype.org/content/repositories/snapshots&#x27;</span> &#125;</span><br><span class="line">        handler.maven &#123; url <span class="string">&quot;https://maven.aliyun.com/nexus/content/groups/public/&quot;</span> &#125;</span><br><span class="line">        handler.maven &#123; url <span class="string">&quot;https://maven.aliyun.com/nexus/content/repositories/releases&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 其中的使用本地Maven对应<strong>上传至Maven</strong>篇的publishToMavenLocal选项，将组件发布到本地maven，这在云端组件的调试阶段非常有用。</p></li><li><p>在XXXController的apply方法中调用addRepos方法，并且在<strong>上传至Maven</strong>篇中获得最新快照版本的配置也可统一写入这里</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DependenciesVersionController</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line"></span><br><span class="line">        SylinkProperties properties = PropertiesUtils.readProperties(project)</span><br><span class="line">        println properties</span><br><span class="line"></span><br><span class="line">        Repos.addRepos(project, properties)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//快照版本永远检查最新</span></span><br><span class="line">        project.configurations.all &#123;</span><br><span class="line">            resolutionStrategy.cacheChangingModulesFor <span class="number">0</span>, <span class="string">&#x27;seconds&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        AppPlugins.addPlugins(project, properties)</span><br><span class="line">        AppConfig.addConfig(project, properties)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="依赖统一管理"><a href="#依赖统一管理" class="headerlink" title="依赖统一管理"></a>依赖统一管理</h4><ol><li><p>新建Versions.java，用来定义依赖版本号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Versions</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String android_gradle_plugin = <span class="string">&quot;7.0.2&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String android_startup = <span class="string">&quot;1.0.7&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String mmkv = <span class="string">&quot;1.2.7&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//TODO 用到的依赖版本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据依赖分组建立依赖路径管理包，如Room下有四个依赖路径，新建Room.java文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Room</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String runtime = <span class="string">&quot;androidx.room:room-runtime:&quot;</span>+ Versions.room;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String compiler_kapt = <span class="string">&quot;androidx.room:room-compiler:&quot;</span>+Versions.room;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String testing = <span class="string">&quot;androidx.room:room-testing:&quot;</span>+Versions.room;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String ktx = <span class="string">&quot;androidx.room:room-ktx:&quot;</span>+Versions.room;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据不同组件建议依赖管理java文件，并定义依赖数组，如Event组件，新建EventExt.java文件，定义eventDepList数组，数组中存放的是  步骤2.  中的依赖路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventExt</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] eventDepList = &#123;</span><br><span class="line">            Koin.android,</span><br><span class="line">            Koin.android_compat,</span><br><span class="line">            Support.android_startup,</span><br><span class="line">            Others.liveeventbus,</span><br><span class="line">            Others.timber,</span><br><span class="line">            Others.gson,</span><br><span class="line">            Kotlin.stdlib,</span><br><span class="line">            Kotlin.coroutines,</span><br><span class="line">            Others.mmkv,</span><br><span class="line">            Others.slf4j,</span><br><span class="line">            DRouter.api,</span><br><span class="line">            Retrofit.okhttp_logging_interceptor,</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在插件中新建ModuleEnum，放入各个组件的名字，方便判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ModuleEnum</span> </span>&#123;</span><br><span class="line">    EVENT(<span class="string">&quot;lib.event&quot;</span>),</span><br><span class="line">    NETWORK(<span class="string">&quot;lib.network&quot;</span>),</span><br><span class="line">    DATABASE(<span class="string">&quot;lib.database&quot;</span>),</span><br><span class="line">    FRAME(<span class="string">&quot;lib.frame&quot;</span>),</span><br><span class="line">    SCAN(<span class="string">&quot;lib.scan&quot;</span>),</span><br><span class="line">    REMOTE(<span class="string">&quot;lib.remote&quot;</span>),</span><br><span class="line">    WEBSOCKET(<span class="string">&quot;lib.websocket&quot;</span>),</span><br><span class="line">    RABBITMQ(<span class="string">&quot;lib.rabbitmq&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    ModuleEnum(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建AppDep.groovy，用于管理所有组件和项目的依赖项，以event组件为例，循环implementation定义的依赖，<strong>往往路径中有compiler的依赖是注解类依赖，需要使用katp</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> def <span class="title">addDep</span><span class="params">(Project project, SylinkProperties sylinkProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sylinkProperties.SYLINK_APPLICATION_ID.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (project.name) &#123;</span><br><span class="line">                <span class="keyword">case</span> ModuleEnum.EVENT.name:</span><br><span class="line">                    project.dependencies &#123;</span><br><span class="line">                        EventExt.eventDepList.each &#123;</span><br><span class="line">                            implementation it</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                 <span class="keyword">case</span> ModuleEnum.DATABASE.name:</span><br><span class="line">                    project.dependencies &#123;</span><br><span class="line">                        DatabaseExt.databaseDepList.each &#123;</span><br><span class="line">                            <span class="keyword">if</span> (it.contains(<span class="string">&quot;compiler&quot;</span>)) &#123;</span><br><span class="line">                                kapt it</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                implementation it</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在XXXController的apply方法中调用addDep方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DependenciesVersionController</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line"></span><br><span class="line">        SylinkProperties properties = PropertiesUtils.readProperties(project)</span><br><span class="line">        println properties</span><br><span class="line"></span><br><span class="line">        Repos.addRepos(project, properties)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//快照版本永远检查最新</span></span><br><span class="line">        project.configurations.all &#123;</span><br><span class="line">            resolutionStrategy.cacheChangingModulesFor <span class="number">0</span>, <span class="string">&#x27;seconds&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        AppPlugins.addPlugins(project, properties)</span><br><span class="line">        AppConfig.addConfig(project, properties)</span><br><span class="line">        AppDep.addDep(project, properties)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>在<strong>新建项目篇</strong>中已经介绍了插件集成了push.gradle，跟云端组件上传至Maven一样，在插件开发完成后点publish即可发布到Maven仓库中</p><p>需要注意的是这个gradle插件，不是android的项目，所以上传来源有所不同。</p><p><strong>在android项目中，上传来源是components.release，而gradle插件则是components.java</strong></p>  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">afterEvaluate &#123;</span><br><span class="line">    publishing &#123;</span><br><span class="line">        publications &#123;</span><br><span class="line">            Production(MavenPublication) &#123;</span><br><span class="line">                <span class="comment">// from components.release 这是android组件的配置</span></span><br><span class="line">                from components.java</span><br><span class="line">              </span><br><span class="line">                <span class="comment">//TODO ...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在项目的build.gradle文件中添加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    classpath <span class="string">&#x27;com.shuyilink:dfs-app-version:1.0.0-XXXXXXX&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在模块的build.gradle文件中添加</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.sylink.dfs.app.version.plugin&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><p>​    这样所有的组件均可获得插件内的gradle配置</p><p>   <strong>至此插件的基本开发结束，不同项目和不同组件可通过包名或组件名来做不同的动态配置</strong></p><h2 id="gradle-properties读取"><a href="#gradle-properties读取" class="headerlink" title="gradle.properties读取"></a>gradle.properties读取</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>gradle.properties可以写入一些项目的配置常量，且能被build.gradle读取，但由于云端组件独立于每个项目之中，这就导致了每个组件有自己的一份</p><p>build.config文件，每个项目维护一份读取gradle.properties的方法很冗余，需要有统一读取项目的配置文件的方法。</p><h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h3><p>在所有模块都依赖上面的gradle插件后，可以将gradle.properties中的配置统一写进gradle插件中</p><ol><li><p>在插件中定义PropertiesEnum，来定义gradle.properties中值的key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">PropertiesEnum</span> </span>&#123;</span><br><span class="line">    DESIGN_WIDTH,</span><br><span class="line">    DESIGN_HEIGHT,</span><br><span class="line">    SYLINK_COMPANY,</span><br><span class="line">    SYLINK_IS_BUILD_MODULE,</span><br><span class="line">    SYLINK_IS_JENKINS,</span><br><span class="line">    SYLINK_SERVER,</span><br><span class="line">    SYLINK_APPLICATION_ID,</span><br><span class="line">    SYLINK_USE_LOCAL_MAVEN,</span><br><span class="line">    SYLINK_VERSION,</span><br><span class="line">    SYLINK_KEY_STORE,</span><br><span class="line">    SYLINK_KEY_STORE_PWD,</span><br><span class="line">    SYLINK_KEY_ALIAS,</span><br><span class="line">    SYLINK_KEY_ALIAS_PWD,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义bean类SylinkProperties，将上面的值定义在bean类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SylinkProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> String DESIGN_WIDTH;</span><br><span class="line">       <span class="keyword">private</span> String DESIGN_HEIGHT;</span><br><span class="line">       <span class="keyword">private</span> Boolean SYLINK_IS_DEBUG;</span><br><span class="line">       <span class="keyword">private</span> String SYLINK_COMPANY;</span><br><span class="line">       <span class="keyword">private</span> Boolean SYLINK_IS_BUILD_MODULE;</span><br><span class="line">       <span class="keyword">private</span> Boolean SYLINK_IS_JENKINS;</span><br><span class="line">       <span class="keyword">private</span> String SYLINK_SERVER;</span><br><span class="line">       <span class="keyword">private</span> String SYLINK_APPLICATION_ID;</span><br><span class="line">       <span class="keyword">private</span> String SYLINK_VERSION_NAME;</span><br><span class="line">       <span class="keyword">private</span> Integer SYLINK_VERSION_CODE;</span><br><span class="line">       <span class="keyword">private</span> Boolean SYLINK_USE_LOCAL_MAVEN;</span><br><span class="line">       <span class="keyword">private</span> String SYLINK_KEY_STORE;</span><br><span class="line">       <span class="keyword">private</span> String SYLINK_KEY_STORE_PWD;</span><br><span class="line">       <span class="keyword">private</span> String SYLINK_KEY_ALIAS;</span><br><span class="line">       <span class="keyword">private</span> String SYLINK_KEY_ALIAS_PWD;</span><br><span class="line">   <span class="comment">//TODO 构造，get set方法 </span></span><br><span class="line">       </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>编写方法读取项目中properties中的值并赋值到SylinkProperties中，properties中值的key必须跟<code>PropertiesEnum</code>中一样</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropertiesUtils</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> SylinkProperties readProperties(Project project) &#123;</span><br><span class="line">        HashMap proMap = project.properties</span><br><span class="line">        SylinkProperties sylinkProperties = <span class="keyword">new</span> SylinkProperties()</span><br><span class="line">        </span><br><span class="line">        sylinkProperties.setDESIGN_HEIGHT(proMap[PropertiesEnum.DESIGN_HEIGHT.name()])</span><br><span class="line">        sylinkProperties.setDESIGN_WIDTH(proMap[PropertiesEnum.DESIGN_WIDTH.name()])</span><br><span class="line">        </span><br><span class="line">        sylinkProperties.setSYLINK_IS_DEBUG(!AppInfoUtils.isReleaseBuildType(project.gradle))</span><br><span class="line">        <span class="comment">//TODO 其他项赋值 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在XXXController的apply方法中调用readProperties方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DependenciesVersionController</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line"></span><br><span class="line">        SylinkProperties properties = PropertiesUtils.readProperties(project)</span><br><span class="line">        println properties</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>至此，只要在组件中依赖gradle插件，就能统一读取gradle.properties中的属性并通过<strong>properties实例</strong>使用</p></li></ol><h2 id="BuildConfig失效"><a href="#BuildConfig失效" class="headerlink" title="BuildConfig失效"></a>BuildConfig失效</h2><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><p>上传至maven的是aar包，aar包可以理解为加了资源文件的jar包，jar包中是编译后的java/kotlin文件，即.class文件。</p><p><strong>这也是为什么只有云端依赖的组件化才能真正提高编译速度的原因</strong></p><p>而BuildConfig是在编译中根据build.gradle的buildTypes中的配置项写入的。</p><p>既然aar包已经编译了，那云端组件的BuildConfig自然也就已经写入生成了，<strong>所以在云端组件中BuildConfig.DEBUG永远是false</strong></p><p><strong>需要寻找可替代BuildConfig的配置，使云端依赖也能跟随实际项目的配置而改变，比如服务器地址，UI自适应的宽高等</strong></p><p>这个配置需满足两个条件：</p><ol><li>能同时影响本地组件和编译后的云端组件（能被这两种组件共用）</li><li>在编译时根据build.gradle文件动态改变对应的值</li></ol><h3 id="实现-7"><a href="#实现-7" class="headerlink" title="实现"></a>实现</h3><p>使用AndroidManifest.xml替代Build.Config，</p><p>对于上面两个条件</p><ol><li>在编译时所有模块的AndroidManifest.xml会合并成一个文件，满足被所有组件共用的条件</li><li>AndroidManifest.xml中的属性可以在build.gradle中通过manifestPlaceholders设置，且可通过反射被读出，满足动态改变的条件。</li></ol><p>同样使用自定义的插件来实现所有模块的配置统一读写方法</p><ol><li><p>动态配置属性均写在gradle.properties中，使用上面的<strong>gradle.properties读取篇</strong>，将配置写入sylinkProperties实例</p></li><li><p>根据<strong>build配置统一管理篇</strong>，在addConfig方法中加入配置：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果是application模块</span></span><br><span class="line"><span class="keyword">if</span> (project.plugins.hasPlugin(<span class="string">&#x27;com.android.application&#x27;</span>)) &#123;</span><br><span class="line">    project.android &#123;</span><br><span class="line">        defaultConfig &#123;</span><br><span class="line">            applicationId sylinkProperties.SYLINK_APPLICATION_ID</span><br><span class="line">            manifestPlaceholders = [</span><br><span class="line">                    <span class="attr">DESIGN_WIDTH          :</span> sylinkProperties.DESIGN_WIDTH,</span><br><span class="line">                    <span class="attr">DESIGN_HEIGHT         :</span> sylinkProperties.DESIGN_HEIGHT,</span><br><span class="line">                    <span class="attr">SYLINK_IS_DEBUG       :</span> sylinkProperties.SYLINK_IS_DEBUG,</span><br><span class="line">                    <span class="symbol">SYLINK_IS_BUILD_MODULE:</span> sylinkProperties.SYLINK_IS_BUILD_MODULE,</span><br><span class="line">                    <span class="attr">SYLINK_IS_JENKINS     :</span> sylinkProperties.SYLINK_IS_JENKINS,</span><br><span class="line">                    <span class="attr">SYLINK_SERVER         :</span> sylinkProperties.SYLINK_SERVER,</span><br><span class="line">                    <span class="attr">SYLINK_APPLICATION_ID :</span> sylinkProperties.SYLINK_APPLICATION_ID,</span><br><span class="line">                    <span class="attr">SYLINK_VERSION_NAME   :</span> sylinkProperties.SYLINK_VERSION_NAME,</span><br><span class="line">                    <span class="attr">SYLINK_COMPANY        :</span> sylinkProperties.SYLINK_COMPANY,</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在项目壳App的AndroidManifest.xml中加入meta-data配置，vlaue必须与上面的key相对应</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;design_width_in_dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;$&#123;DESIGN_WIDTH&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;design_height_in_dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;$&#123;DESIGN_HEIGHT&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;SYLINK_IS_DEBUG&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;$&#123;SYLINK_IS_DEBUG&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;SYLINK_SERVER&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;$&#123;SYLINK_SERVER&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;SYLINK_IS_JENKINS&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;$&#123;SYLINK_IS_JENKINS&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;SYLINK_IS_BUILD_MODULE&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;$&#123;SYLINK_IS_BUILD_MODULE&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;SYLINK_COMPANY&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;$&#123;SYLINK_COMPANY&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;SYLINK_APPLICATION_ID&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;$&#123;SYLINK_APPLICATION_ID&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在event组件中添加getMetaData方法，由于这些配置所有组件都可能有用，所以将方法放在event组件内，方便全局调用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> BuildConfigParseUtil &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> KEY_SERVER = <span class="string">&quot;SYLINK_SERVER&quot;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> KEY_IS_JENKINS = <span class="string">&quot;SYLINK_IS_JENKINS&quot;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> KEY_IS_BUILD_MODULE = <span class="string">&quot;SYLINK_IS_BUILD_MODULE&quot;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> KEY_COMPANY = <span class="string">&quot;SYLINK_COMPANY&quot;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> KEY_IS_DEBUG = <span class="string">&quot;SYLINK_IS_DEBUG&quot;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> KEY_APPLICATION_ID = <span class="string">&quot;SYLINK_APPLICATION_ID&quot;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> KEY_VERSION_NAME = <span class="string">&quot;SYLINK_VERSION_NAME&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getMetaData</span><span class="params">(context: <span class="type">Context</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> packageManager = context.packageManager</span><br><span class="line">        <span class="keyword">val</span> applicationInfo: ApplicationInfo</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            applicationInfo = packageManager.getApplicationInfo(</span><br><span class="line">                context</span><br><span class="line">                    .packageName, PackageManager.GET_META_DATA</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> (applicationInfo != <span class="literal">null</span> &amp;&amp; applicationInfo.metaData != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (applicationInfo.metaData.containsKey(KEY_SERVER)) &#123;</span><br><span class="line">                    SylinkConstants.SERVER =</span><br><span class="line">                        applicationInfo.metaData[KEY_SERVER] <span class="keyword">as</span> String</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (applicationInfo.metaData.containsKey(KEY_COMPANY)) &#123;</span><br><span class="line">                    SylinkConstants.COMPANY =</span><br><span class="line">                        applicationInfo.metaData[KEY_COMPANY] <span class="keyword">as</span> String</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (applicationInfo.metaData.containsKey(KEY_IS_JENKINS)) &#123;</span><br><span class="line">                    SylinkConstants.IS_JENKINS =</span><br><span class="line">                        applicationInfo.metaData[KEY_IS_JENKINS] <span class="keyword">as</span> <span class="built_in">Boolean</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (applicationInfo.metaData.containsKey(KEY_IS_BUILD_MODULE)) &#123;</span><br><span class="line">                    SylinkConstants.IS_BUILD_MODULE =</span><br><span class="line">                        applicationInfo.metaData[KEY_IS_BUILD_MODULE] <span class="keyword">as</span> <span class="built_in">Boolean</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (applicationInfo.metaData.containsKey(KEY_IS_DEBUG)) &#123;</span><br><span class="line">                    SylinkConstants.IS_DEBUG =</span><br><span class="line">                        applicationInfo.metaData[KEY_IS_DEBUG] <span class="keyword">as</span> <span class="built_in">Boolean</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (applicationInfo.metaData.containsKey(KEY_APPLICATION_ID)) &#123;</span><br><span class="line">                    SylinkConstants.APPLICATION_ID =</span><br><span class="line">                        applicationInfo.metaData[KEY_APPLICATION_ID] <span class="keyword">as</span> String</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (applicationInfo.metaData.containsKey(KEY_VERSION_NAME)) &#123;</span><br><span class="line">                    SylinkConstants.VERSION_CODE =</span><br><span class="line">                        applicationInfo.metaData[KEY_VERSION_NAME] <span class="keyword">as</span> String</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: PackageManager.NameNotFoundException) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>至此，通过<strong>gradle.properties读取篇和本篇</strong>，能将项目中的properties配置在编译时成功写入<code>SylinkConstants</code>类中。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓系统卡顿分析</title>
      <link href="/2021/11/11/%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E5%8D%A1%E9%A1%BF%E5%88%86%E6%9E%90/"/>
      <url>/2021/11/11/%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E5%8D%A1%E9%A1%BF%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>最近<strong>华为方舟编译器</strong>要开源了，笔者去看了下发布会PPT，发现作为一名Android开发者，PPT中所介绍的知识点我居然不能完全看懂？？？于是乎恶补了下PPT中的内容，整理成本文。</p><p>本文将用通俗的语言从底层介绍Android卡顿的历史原因和谷歌与之斗争的过程</p><p>阅读完这篇文章后你将</p><ol><li><p>理解计算机是如何解读我们所写的程序并执行相应功能的</p></li><li><p>了解Android虚拟机的进化史</p></li><li><p>从底层了解造成Android卡顿的三大原因</p></li></ol><h2 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h2><blockquote><p>首先我们需要补习下一些基础概念，来理解计算机是如何解读我们所写的程序并执行相应功能的。</p></blockquote><h3 id="1-编译-amp-解释"><a href="#1-编译-amp-解释" class="headerlink" title="1.编译&amp;解释"></a>1.编译&amp;解释</h3><blockquote><p>某些编程语言（如Java）的源代码通过编译-解释的流程可被计算机读懂</p></blockquote><p>先上一段Java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    print(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是所有程序员的第一课，只需要写完这段代码并执行，电脑或手机就会打印出<code>Hello World</code>。<br>那么问题来了，英文是人类世界的语言，计算机（CPU）是怎么理解英文的呢？</p><p>众所周知，0和1是计算机世界的语言，可以说计算机只认识0和1。<br>那么我们只需要把上面那段英文代码只通过0和1表达给计算机，就可以让计算机读懂并执行。</p><p><img src="/2021/11/11/%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E5%8D%A1%E9%A1%BF%E5%88%86%E6%9E%90/3.png"></p><p>结合上图，Java源代码通过<code>编译</code>变成字节码，然后字节码按照模版中的规则<code>解释</code>为机器码。</p><h3 id="2-机器码-amp-字节码"><a href="#2-机器码-amp-字节码" class="headerlink" title="2.机器码&amp;字节码"></a>2.机器码&amp;字节码</h3><ul><li><p>机器码</p><blockquote><p>机器码就是能被CPU直接解读并执行的语言。</p></blockquote><p>  但是如果使用上图中生成的机器码跑在另外一台计算机中，很可能就会运行失败。</p><p>  这是因为不同的计算机，能够解读的机器码可能不同。通俗而言就是能在A电脑上运行的机器码，放到B电脑上就可能就不好使了。</p><p>  举个🌰，中国人A认识中文，英语；俄国人B认识俄语，英语。这时他两同时做一张中文试卷，B大概连写名字的地方都找不到。</p><p>  所以这时候我们需要字节码。</p></li><li><p>字节码</p><blockquote><p>中国人A看不懂俄文试卷，俄国人B看不懂中文试卷，但是大家都看得懂英文试卷。</p></blockquote></li></ul><pre><code>字节码就是个`中间码`，Java能编译为字节码，同一份字节码能按照指定模版的规则解释为指定的`机器码`。字节码的好处：1.实现了跨平台，一份**源代码**只需要编译成一份**字节码**，然后根据不同的模版将字节码解释成当前计算机认识的**机器码**，这就是Java所说的“编译一次，到处运行”。2.同一份`源码`被编译成的`字节码`大小远远小于`机器码`。</code></pre><p><img src="/2021/11/11/%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E5%8D%A1%E9%A1%BF%E5%88%86%E6%9E%90/6.png"></p><h3 id="3-编译语言-amp-解释语言"><a href="#3-编译语言-amp-解释语言" class="headerlink" title="3.编译语言&amp;解释语言"></a>3.编译语言&amp;解释语言</h3><ul><li><p>编译语言</p><blockquote><p>我们熟知的C/C++语言，是<code>编译语言</code>，即程序员编译之后可以一步到位（编译成机器码），可以被CPU直接解读并执行。</p></blockquote><p>  <img src="/2021/11/11/%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E5%8D%A1%E9%A1%BF%E5%88%86%E6%9E%90/4.png"></p><p>  可能有人会问，既然上文中说过<code>字节码</code>有种种好处，为什么不使用<code>字节码</code>呢？</p><p>  这是因为每种编程语言设计的初衷不同,有些是为了跨平台而设计的，如Java，但有些是针对某个指定机器或某批指定型号的机器设计的。</p><p>  举个🌰，苹果公司开发的OC语言和Swift语言，就是针对自家产品设计的，我才不管你其他人的产品呢。所以OC或Swift语言设计初衷之一就是快，可直接编译为机器码使iPhone或iPad解读并执行。这也是为什么苹果手机的应用比安卓手机应用大的主要原因。这更是为什么苹果手机更流畅的原因之一！(没有中间商赚差价)</p></li><li><p>编译-解释语言</p><p>  拿开发Android的语言Java为例，Java是<strong>编译-解释语言</strong>,即程序员编译之后不可以直接编译为机器码，而是会编译成<strong>字节码</strong>(在Java程序中为.class文件，在Android程序中为.dex文件)。然后我们需要将<strong>字节码再解释成机器码</strong>,使之能被CPU解读。</p><p>  这第二次解释，即从<strong>字节码解释成机器码</strong>的过程，是程序安装或运行后，在Java虚拟机中实现的。</p></li></ul><h2 id="二、造成卡顿的三大因素"><a href="#二、造成卡顿的三大因素" class="headerlink" title="二、造成卡顿的三大因素"></a>二、造成卡顿的三大因素</h2><hr><p>今年最新的Android版本已经是10了，其实在这两年关于Android手机卡顿的声音已经慢慢低了下去，取而代之的是流畅如iOS之类的声音。</p><p>但是诸如超过iOS的话，还比较少，其实是因为Android有卡顿有三大历史原因。起步就比iOS低。</p><h3 id="1-虚拟机——解释过程慢"><a href="#1-虚拟机——解释过程慢" class="headerlink" title="1.虚拟机——解释过程慢"></a>1.虚拟机——解释过程慢</h3><blockquote><p>通过上文描述，我们可以知道，iOS之所以不卡是因为他一步到位，省略了中间解释的步骤，直接跟硬件层进行通信。而Android由于没有一步到位，每次执行都需要实时解释成机器码，所以性能较iOS明显低下。</p></blockquote><p>我们已经明确知道了字节码（中间商）是造成卡顿的主要元凶之一，我们可否像iOS那样扔掉字节码，直接一步到位呢？</p><p>明显不能，因为iOS搞来搞去就那么几个机型。反观Android方面，光手机就有无数种机型，无数种CPU架构/型号，更别提什么平板，车载等其他设备了。有那么多类型的硬件设备代表着就有非常多不同的硬件架构，每种架构都有自己对应的机器码解释规则。显然像iOS那样一步到位是不现实的。</p><p>那怎么办呢？既然扔不掉字节码这个中间商，那我们只能剥削他咯，让整个解释的过程快一点，再快一点。而解释所在的“工厂”在虚拟机内。</p><p><strong>接下来就是伟大的Android虚拟机进化之路！</strong></p><h4 id="①-Andorid-1-0-Dalvik-DVM-解释器"><a href="#①-Andorid-1-0-Dalvik-DVM-解释器" class="headerlink" title="① Andorid 1.0 Dalvik(DVM)+解释器"></a>① Andorid 1.0 Dalvik(DVM)+解释器</h4><p>DVM是Google开发的Android平台虚拟机,可读取.dex的字节码。<br>上文中所说的从<code>字节码解释成机器码</code>的过程在Java虚拟机中，在Android平台中虚拟机指的就是这个DVM。<br>在Android1.0时期，程序一边运行，DVM中的解释器（翻译机）一边解释<code>字节码</code>。<br>可想而知，这样效率绝对低下。一个字，卡。</p><h4 id="②-Android-2-2-DVM-JIT"><a href="#②-Android-2-2-DVM-JIT" class="headerlink" title="② Android 2.2 DVM+JIT"></a>② Android 2.2 DVM+JIT</h4><p>其实解决DVM的问题思路很清楚，我们在程序某个功能运行前就<code>解释</code>就可以了。</p><p>在Android2.2时期，聪明的谷歌引入了JIT(Just In Time)机制，直译就是即时编译。</p><p>举个🌰，我经常去一家餐馆吃饭，老板已经知道我想吃什么菜了，在我到之前就把菜准备好了，这样我就省去了等菜的时间。</p><p>JIT就相当于这个聪明的老板，它会在手机打开APP时，将用户经常使用的功能记下来。当用户打开APP的时候立马将这些内容编译出来，这样当用户打开这些内容时，JIT已经将’菜’准备好了。这样就提高了整体效率。</p><p>虽然JIT挺聪明的，且总体思路清晰理想丰满，但现实是仍然卡的要死。</p><p>存在的问题：</p><ul><li>打开APP的时候会变慢</li><li>每次打开APP都要重复劳动，不能一劳永逸。</li><li>如果我突然点了一盘之前从来没点过的菜，那我只好等菜了，所以如果用户打开了JIT没有准备好的’菜’，就只能等DVM中的解释器去边执行边解释了。</li></ul><h4 id="③-Android-5-0-ART-AOT"><a href="#③-Android-5-0-ART-AOT" class="headerlink" title="③ Android 5.0 ART+AOT"></a>③ Android 5.0 ART+AOT</h4><p>聪明的谷歌又想到个方法，既然我们能在打开APP的时候将<code>字节码</code>编译成<code>机器码</code>，那么我们何不在APP安装的时候就把<code>字节码</code>编译成<code>机器码</code>呢？这样每次打开APP也不用重复劳动了，一劳永逸。</p><p>这确实是个思路，于是谷歌推出了ART来替代DVM，ART全称Android Runtime，它在DVM的基础上做了一些优化，它在应用被安装的时候就将应用编译成<code>机器码</code>,这个过程称为AOT(Ahead-Of-Time)，即<strong>预编译</strong>。</p><p>但是问题又来了，打开APP是不卡了，但是安装APP慢的要死，可能有人会说，一个APP又不是会频繁安装，可以牺牲下这点时间。<br>但是不好意思，<strong>安卓手机每次OTA启动（即系统版本更新或刷机后）都会重新安装所有APP</strong>，无奈吧！绝望吧！对，还记得那两年，被安卓版本更新所支配的恐惧吗！</p><h4 id="④-Android-7-0-混合编译"><a href="#④-Android-7-0-混合编译" class="headerlink" title="④ Android 7.0 混合编译"></a>④ Android 7.0 混合编译</h4><p>谷歌最终祭出了终极大招，DVM+JIT不好，ART+AOT又不好。行，我把他们都混合起来，那总可以了吧！</p><p>于是谷歌在Android7.0的时候，发布了混合编译。<br>即安装时先不编译成<code>机器码</code>，在手机不被使用的时候，AOT偷偷的把能编译成<code>机器码</code>的那部分代码编译了（至于什么是能编译的部分，下文<code>字节码的编译模板</code>详述）。其实就是把之前APP安装时候干的活偷偷的在手机空的时候干了。</p><p>如果来不及编译的话，再把JIT和解释器这对难兄难弟叫起来，让他们去编译或实时解释。</p><p>不得不佩服谷歌这粗暴的解决问题的方式，这样一来确实Android手机从万年卡顿慢慢的坑中出来了。</p><h4 id="⑤-Android-8-0-改进解释器"><a href="#⑤-Android-8-0-改进解释器" class="headerlink" title="⑤  Android 8.0 改进解释器"></a>⑤  Android 8.0 改进解释器</h4><p>在Android8.0时期，谷歌又盯上了解释器，其实纵观上面的问题，根源就是这个解释器解释的太慢了！（什么JIT,AOT,老夫解释只有一个字，快）那我们何不让这个解释器解释的快一点呢？<br>于是谷歌改进了解释器，解释模式执行效率大大提升。</p><h4 id="⑥-Android-9-0-改进编译模板"><a href="#⑥-Android-9-0-改进编译模板" class="headerlink" title="⑥  Android 9.0 改进编译模板"></a>⑥  Android 9.0 改进编译模板</h4><p>这个点会在下文<code>字节码的编译模板</code>中详述。</p><p>这边简单而言就是，在Android9.0上提供了预先放置热点代码的方式，应用在安装的时候就能知道常用代码会被提前编译。（借用知乎<a href="https://www.zhihu.com/question/319688949">@weishu</a>大神的原话）</p><h3 id="2-JNI——Java和C互相调用慢"><a href="#2-JNI——Java和C互相调用慢" class="headerlink" title="2.JNI——Java和C互相调用慢"></a>2.JNI——Java和C互相调用慢</h3><blockquote><p>JNI又称为 Java Native Interface，翻译过来就是Java原生接口，就是用来跟C/C++代码交互的。</p></blockquote><p>如果不做Android开发的可能不知道，Android项目里的代码除了Java,很有可能还有部分C语言的代码。</p><p>这个时候有个严重的问题，首先上图 (图片参考方舟编译器原理PPT)：</p><p><img src="/2021/11/11/%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E5%8D%A1%E9%A1%BF%E5%88%86%E6%9E%90/5.png"></p><p>在开发阶段Java源代码在开发阶段打包成.dex文件，C语言直接就是.so库，因为C语言本身就是编译语言。</p><p>在用户手机中，APK中的.dex文件（字节码）会被解释为.oat文件（机器码）运行在ART虚拟机中，.so库则为计算机可以直接运行的二进制代码（机器码），<strong>两份机器码要互相调用肯定是有开销的。</strong></p><p>下面就来阐述下为什么两份机器码会不同。</p><p>这边需要深入理解<code>字节码-&gt;机器码</code>的编译过程，在图上虽然都被编译成了机器码，都能被硬件直接调用，但是两份机器码的性能，效率，实现方式相差甚多，这主要是由以下两个点造成的：</p><ul><li><p>编程语言不同导致编译出的<code>字节码</code>不同导致编译出的<code>机器码</code>不同。</p><p> 举个🌰，针对同样是静态语言的C和Java，对int a + b 的运算</p><p> C语言可以直接加载内存，在寄存器中计算，这是由于C语言是静态语言，a和b是确定的int对象。</p><p> 在Java中虽然定义对象我们也要明确的指出对象的类型，例如int a = 0,但是Java拥有动态性，Java拥有反射，代理，谁也不敢保证a在被调用时还是int类型，所以Java的编译需要考虑上下文关系，即具体情况具体编译。</p><p> 所以连<code>字节码</code>已经不同了，编译出的<code>机器码</code>肯定不同。</p></li><li><p><code>运行环境</code>不同导致编译出的<code>机器码</code>不同</p><p>  图中明显看到由Java编译而来的<code>机器码</code>包裹在ART中，ART全称Android RunTime，即安卓运行环境，跟虚拟机差不多是一个意思。而C语言所在的运行环境不在ART中。</p><p>  RunTime提供了基本的输入输出或是内存管理等支持，如果要在两个不同的RunTime中互相调用，则必然有额外开销。</p><p>  举个🌰，由于Java有GC（垃圾回收机制），在Java中的一个对象地址不是固定的，有可能被GC挪动了。即在ART环境中跑的机器码中的对象的地址不固定。可是C语言哪管那么多幺蛾子，C就直接问Java要一个对象的地址，但万一这个对象地址被挪动了，那就完蛋了。解决方案有两个：</p><ol><li>把这个对象在C里再拷一份。很明显这造成了很大的开销。</li><li>告诉ART，我要用这个对象了，GC这个对象的地址你不能动！你先一边呆着去。这样相对而言开销倒是小了，但如果这个地址如果一直不能被回收的话，可能造成OOM。</li></ol><p>  （此处参考知乎<a href="https://www.zhihu.com/people/Apache/activities">@张铎</a>在<a href="https://www.zhihu.com/question/319688949">华为公布的方舟编译器到底对安卓软件生态会有多大影响？</a>中的回答）</p></li></ul><h3 id="3-字节码的编译模板——未针对具体APP进行优化"><a href="#3-字节码的编译模板——未针对具体APP进行优化" class="headerlink" title="3. 字节码的编译模板——未针对具体APP进行优化"></a>3. 字节码的编译模板——未针对具体APP进行优化</h3><blockquote><p>我们举个🌰来理解编译模版，“Hello world”可以被翻译为“你好，世界”，同样也可以被翻译为“世界，你好”，这个差别就是<code>编译模版</code>不同导致的，</p></blockquote><h4 id="①-统一的编译模版（vm模版）"><a href="#①-统一的编译模版（vm模版）" class="headerlink" title="①. 统一的编译模版（vm模版）"></a>①. 统一的编译模版（vm模版）</h4><p><code>字节码</code>可以通过不同的编译模版被编译为<code>机器码</code>，而编译模版的不同将直接导致编译完后的<code>机器码</code>性能大相径庭。<br><img src="/2021/11/11/%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E5%8D%A1%E9%A1%BF%E5%88%86%E6%9E%90/1.png"></p><p>在安卓中，ART有一套规定的，统一的编译模版，暂且称为<code>VM模版</code>，这套模版虽算不上差劲，但也算不上优秀。</p><p>因为它是谷歌爸爸搞出来的，肯定算不上差劲，但由于没有针对每一个APP进行特定的优化，所以也算不上优秀。</p><h4 id="②-vm模版存在的问题"><a href="#②-vm模版存在的问题" class="headerlink" title="②. vm模版存在的问题"></a>②. vm模版存在的问题</h4><p><strong>问题就存在于没有针对每一个APP进行优化。</strong></p><p>在上文<code>谷歌对于Android2.2的虚拟机优化</code>中已经讲到过，那时候谷歌使用JIT将用户常用的功能记下来(热点代码)，当用户打开APP的时候立马将这些内容编译出来，即优先编译<code>热点代码</code>。</p><p>但是到了Android7.0的混合编译时代，由于AOT的存在，这个功能被弱化了，这时JIT记录下的热点代码并非是持久化的。AOT的编译优先级遵循于vm模版，AOT根据模板的内容将一些<code>字节码</code>优先编译为<code>机器码</code>。</p><p>那么这个时候就产生了一个问题。</p><p>先举个🌰，一家中餐馆的招牌菜是番茄炒蛋，那么番茄炒蛋的备菜肯定很足，但是顾客A特立独行，他偏偏不要吃番茄炒蛋，他每次都点一个冷门的牛排套餐，那这时候只能让顾客等着老板将牛排套餐做完。</p><p>如果一个APP的热点代码（如首页），刚好<strong>游离于VM模板之外</strong>，那么AOT就其实形同虚设了。(比如vm模版优先编译名称不大于15个字符的类和方法，但是首页的类名刚好高于15个字符。此处仅为举例并没有实际论证过）</p><p>下面用首页和设置页来举例：由于遵循vm模版，AOT因为某个原因没有优先编译首页部分代码，而转而去编译了不太重要的设置页代码：</p><p><img src="/2021/11/11/%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E5%8D%A1%E9%A1%BF%E5%88%86%E6%9E%90/2.png"></p><p>上图的流程说明了在特殊情况下，AOT编译实则不起作用，完全是靠解释器和JIT在进行实时编译，整个编译方案退步到了Android2.2时期。</p><h4 id="③-聪明的ART"><a href="#③-聪明的ART" class="headerlink" title="③. 聪明的ART"></a>③. 聪明的ART</h4><p>虽然这个问题存在，但并不是特别严重。因为ART并没有我说的那么笨。在之后应用使用过程中，ART会记录并学习用户的使用习惯（保存<code>热点代码</code>），然后更新针对当前APP的定制化vm模版，不断的补充<code>热点代码</code>，补充<code>定制化模版</code>。</p><p>这是不是听起来很熟悉？在手机发布大会上的宣传语“基于用户操作习惯进行学习，APP打开速度不断提高”的部分原理就是这个。</p><h4 id="④-最终大招，一劳永逸"><a href="#④-最终大招，一劳永逸" class="headerlink" title="④. 最终大招，一劳永逸"></a>④. 最终大招，一劳永逸</h4><p>其实要一劳永逸的解决这个问题思路也不难：我们只需要在吃饭前跟老板提前预定想吃啥就行，让老板先准备起来，这样等我们到了就不用等餐了。</p><p>在最新的Android9.0版本中，谷歌推出了这个类似提前预定的功能：编译系统支持在具有蓝图编译规则的原生 Android 模块上使用 Clang 的配置文件引导优化 (PGO)。</p><p>说人话：谷歌允许你在开发阶段添加一个配置文件，这个配置文件内可指定“热点代码”，当应用安装完后，ART在后台悄悄编译APP时，会优先编译配置文件中指定的“热点代码”。 </p><p>虽然谷歌支持，但是这块技术对于APP开发人员而言国内资料过于缺乏，普及面不广。笔者先贴上官方<a href="https://source.android.google.cn/devices/tech/perf/pgo">链接</a>，以及这篇<a href="https://juejin.im/post/6844903812566630408">博客</a>，其中介绍的还是挺详细的。（隔壁Xcode针对PGO都有UI界面了）</p><h2 id="三、解决思路"><a href="#三、解决思路" class="headerlink" title="三、解决思路"></a>三、解决思路</h2><p>解决思路总结为四个字就是：华为方舟。</p><p>方舟的解决思路：</p><ol><li><p>针对虚拟机问题，方舟说：我不要你这个烂虚拟机了，我们裸奔</p></li><li><p>针对JNI调用问题，方舟说：我们让Java在编译阶段跟C一样直接编译成机器码，干掉虚拟机，跟.so库直接调用，毫无JNI开销问题</p></li><li><p>针对编译模版问题，方舟说：我们支持针对不同APP进行不同的编译优化</p></li></ol><p>总结一下：方舟支持在打包编译阶段针对不同APP进行不同的编译优化，然后直接打包成机器码.apk(很可能已经不叫apk了)，然后直接运行。</p><p>这样看起来方舟确实解决掉了三大问题，但是，<strong>代价呢？</strong></p><p>如果按照这个思路，方舟就肯定不止是一个编译器了，它应该还有一套自己的runtime。当然这些都是后话了。</p><p>关于方舟的实现只是大概讲了思路，但没有深入，因为一来方舟没开源，二来方舟发布会PPT营销层面更多，技术细节缺少，现在奇思妙想完全是纸上谈兵，一切还是<strong>静待开源</strong>吧。</p><h2 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h2><ol><li><a href="https://www.zhihu.com/question/319688949">华为公布的方舟编译器到底对安卓软件生态会有多大影响？</a></li><li><a href="https://juejin.im/entry/6844903907471130638?utm_source=gold_browser_extension">华为新贵！方舟编译器的荣光和使命</a></li><li><a href="https://zhuanlan.zhihu.com/p/65307730">一文看懂华为方舟编译器，安卓的一大进步</a></li><li><a href="https://stackoverflow.com/questions/24746776/what-does-a-jvm-have-to-do-when-calling-a-native-method/24747484#24747484">What does a JVM have to do when calling a native method?</a></li><li><a href="http://rangerzhou.top/2017/06/30/Something_about_Dalvik_ART_DEX_ODEX_JIT_AOT_OAT/?nsukey=KWUsuLxXJ6ChGzbwDBgnMzhdgqAgUKf6iBc9GREdfjJepHesn95y0REYzg1sobG+4HhzWCsyxnXBfr/yoww6z+2V+QoJR8vn7ZwE1hM+c8r24Ud9l+9WZWR2Zze+/QQP0jVLUr1REv1CCc8dd5bY+ielu0/c9xtV2FEi535jGtCFrFOolR5r0GzSi/kO+A3/MsCM0W4IuSifO6qdBIlIcQ==">关于Dalvik、ART、DEX、ODEX、JIT、AOT、OAT</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
